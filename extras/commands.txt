
addLocationStrategy ( strategyName,functionDefinition )
Defines a new function for Selenium to locate elements on the page. For example, if you define the strategy "foo", and someone runs click("foo=blah"), we'll run your function, passing you the string "blah", and click on the element that your function returns, or throw an "Element not found" error if your function returns null. We'll pass three arguments to your function:
locator: the string the user passed in
inWindow: the currently selected window
inDocument: the currently selected document
The function must return null if the element can't be found.
Arguments:

strategyName - the name of the strategy to define; this should use only letters [a-zA-Z] with no spaces or other punctuation.
functionDefinition - a string defining the body of a function in JavaScript. For example: return inDocument.getElementById(locator);

addScript ( scriptContent,scriptTagId )
Loads script content into a new script tag in the Selenium document. This differs from the runScript command in that runScript adds the script tag to the document of the AUT, not the Selenium document. The following entities in the script content are replaced by the characters they represent: < > & The corresponding remove command is removeScript.
Arguments:

scriptContent - the Javascript content of the script to add
scriptTagId - (optional) the id of the new script tag. If specified, and an element with this id already exists, this operation will fail.

addSelection ( locator,optionLocator )
Add a selection to the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators
Arguments:

locator - an element locator identifying a multi-select box
optionLocator - an option locator (a label by default)

allowNativeXpath ( allow )
Specifies whether Selenium should use the native in-browser implementation of XPath (if any native version is available); if you pass "false" to this function, we will always use our pure-JavaScript xpath library. Using the pure-JS xpath library can improve the consistency of xpath element locators between different browser vendors, but the pure-JS version is much slower than the native implementations.
Arguments:

allow - boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath

altKeyDown ( )
Press the alt key and hold it down until doAltUp() is called or a new page is loaded.

altKeyUp ( )
Release the alt key.

answerOnNextPrompt ( answer )
Instructs Selenium to return the specified answer string in response to the next JavaScript prompt [window.prompt()].
Arguments:

answer - the answer to give in response to the prompt pop-up

assignId ( locator,identifier )
Temporarily sets the "id" attribute of the specified element, so you can locate it in the future using its ID rather than a slow/complicated XPath. This ID will disappear once the page is reloaded.
Arguments:

locator - an element locator pointing to an element
identifier - a string to be used as the ID of the specified element

break ( )
Halt the currently running test, and wait for the user to press the Continue button. This command is useful for debugging, but be careful when using it, because it will force automated tests to hang until a user intervenes manually.

captureEntirePageScreenshot ( filename,kwargs )
Saves the entire contents of the current window canvas to a PNG file. Contrast this with the captureScreenshot command, which captures the contents of the OS viewport (i.e. whatever is currently being displayed on the monitor), and is implemented in the RC only. Currently this only works in Firefox when running in chrome mode, and in IE non-HTA using the EXPERIMENTAL "Snapsie" utility. The Firefox implementation is mostly borrowed from the Screengrab! Firefox extension. Please see http://www.screengrab.org and http://snapsie.sourceforge.net/ for details.
Arguments:

filename - the path to the file to persist the screenshot as. No filename extension will be appended by default. Directories will not be created if they do not exist, and an exception will be thrown, possibly by native code.
kwargs - a kwargs string that modifies the way the screenshot is captured. Example: "background=#CCFFDD" . Currently valid options:
background
the background CSS for the HTML document. This may be useful to set for capturing screenshots of less-than-ideal layouts, for example where absolute positioning causes the calculation of the canvas dimension to fail and a black background is exposed (possibly obscuring black text).

check ( locator )
Check a toggle-button (checkbox/radio)
Arguments:

locator - an element locator

chooseCancelOnNextConfirmation ( )
By default, Selenium's overridden window.confirm() function will return true, as if the user had manually clicked OK; after running this command, the next call to confirm() will return false, as if the user had clicked Cancel. Selenium will then resume using the default behavior for future confirmations, automatically returning true (OK) unless/until you explicitly call this command for each confirmation.

Take note - every time a confirmation comes up, you must consume it with a corresponding getConfirmation, or else the next selenium operation will fail.


chooseOkOnNextConfirmation ( )
Undo the effect of calling chooseCancelOnNextConfirmation. Note that Selenium's overridden window.confirm() function will normally automatically return true, as if the user had manually clicked OK, so you shouldn't need to use this command unless for some reason you need to change your mind prior to the next confirmation. After any confirmation, Selenium will resume using the default behavior for future confirmations, automatically returning true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each confirmation.

Take note - every time a confirmation comes up, you must consume it with a corresponding getConfirmation, or else the next selenium operation will fail.


click ( locator )
Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad.
Arguments:

locator - an element locator

clickAt ( locator,coordString )
Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

close ( )
Simulates the user clicking the "close" button in the titlebar of a popup window or tab.

contextMenu ( locator )
Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
Arguments:

locator - an element locator

contextMenuAt ( locator,coordString )
Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

controlKeyDown ( )
Press the control key and hold it down until doControlUp() is called or a new page is loaded.

controlKeyUp ( )
Release the control key.

createCookie ( nameValuePair,optionsString )
Create a new cookie whose path and domain are same with those of current page under test, unless you specified a path for this cookie explicitly.
Arguments:

nameValuePair - name and value of the cookie in a format "name=value"
optionsString - options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'. the optionsString's format is "path=/path/, max_age=60, domain=.foo.com". The order of options are irrelevant, the unit of the value of 'max_age' is second. Note that specifying a domain that isn't a subset of the current domain will usually fail.

deleteAllVisibleCookies ( )
Calls deleteCookie with recurse=true on all cookies visible to the current page. As noted on the documentation for deleteCookie, recurse=true can be much slower than simply deleting the cookies using a known domain/path.

deleteCookie ( name,optionsString )
Delete a named cookie with specified path and domain. Be careful; to delete a cookie, you need to delete it using the exact same path and domain that were used to create the cookie. If the path is wrong, or the domain is wrong, the cookie simply won't be deleted. Also note that specifying a domain that isn't a subset of the current domain will usually fail. Since there's no way to discover at runtime the original path and domain of a given cookie, we've added an option called 'recurse' to try all sub-domains of the current domain with all paths that are a subset of the current path. Beware; this option can be slow. In big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain name and m is the number of slashes in the path.
Arguments:

name - the name of the cookie to be deleted
optionsString - options for the cookie. Currently supported options include 'path', 'domain' and 'recurse.' The optionsString's format is "path=/path/, domain=.foo.com, recurse=true". The order of options are irrelevant. Note that specifying a domain that isn't a subset of the current domain will usually fail.

deselectPopUp ( )
Selects the main window. Functionally equivalent to using selectWindow() and specifying no value for windowID.

doubleClick ( locator )
Double clicks on a link, button, checkbox or radio button. If the double click action causes a new page to load (like a link usually does), call waitForPageToLoad.
Arguments:

locator - an element locator

doubleClickAt ( locator,coordString )
Doubleclicks on a link, button, checkbox or radio button. If the action causes a new page to load (like a link usually does), call waitForPageToLoad.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

dragAndDrop ( locator,movementsString )
Drags an element a certain distance and then drops it
Arguments:

locator - an element locator
movementsString - offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"

dragAndDropToObject ( locatorOfObjectToBeDragged,locatorOfDragDestinationObject )
Drags an element and drops it on another element
Arguments:

locatorOfObjectToBeDragged - an element to be dragged
locatorOfDragDestinationObject - an element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged is dropped

dragdrop ( locator,movementsString )
deprecated - use dragAndDrop instead
Arguments:

locator - an element locator
movementsString - offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"

echo ( message )
Prints the specified message into the third table cell in your Selenese tables. Useful for debugging.
Arguments:

message - the message to print

fireEvent ( locator,eventName )
Explicitly simulate an event, to trigger the corresponding "onevent" handler.
Arguments:

locator - an element locator
eventName - the event name, e.g. "focus" or "blur"

focus ( locator )
Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.
Arguments:

locator - an element locator

goBack ( )
Simulates the user clicking the "back" button on their browser.

highlight ( locator )
Briefly changes the backgroundColor of the specified element yellow. Useful for debugging.
Arguments:

locator - an element locator

ignoreAttributesWithoutValue ( ignore )
Specifies whether Selenium will ignore xpath attributes that have no value, i.e. are the empty string, when using the non-native xpath evaluation engine. You'd want to do this for performance reasons in IE. However, this could break certain xpaths, for example an xpath that looks for an attribute whose value is NOT the empty string. The hope is that such xpaths are relatively rare, but the user should have the option of using them. Note that this only influences xpath evaluation when using the ajaxslt engine (i.e. not "javascript-xpath").
Arguments:

ignore - boolean, true means we'll ignore attributes without value at the expense of xpath "correctness"; false means we'll sacrifice speed for correctness.

keyDown ( locator,keySequence )
Simulates a user pressing a key (without releasing it yet).
Arguments:

locator - an element locator
keySequence - Either be a string("\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: "w", "\119".

keyPress ( locator,keySequence )
Simulates a user pressing and releasing a key.
Arguments:

locator - an element locator
keySequence - Either be a string("\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: "w", "\119".

keyUp ( locator,keySequence )
Simulates a user releasing a key.
Arguments:

locator - an element locator
keySequence - Either be a string("\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: "w", "\119".

metaKeyDown ( )
Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.

metaKeyUp ( )
Release the meta key.

mouseDown ( locator )
Simulates a user pressing the left mouse button (without releasing it yet) on the specified element.
Arguments:

locator - an element locator

mouseDownAt ( locator,coordString )
Simulates a user pressing the left mouse button (without releasing it yet) at the specified location.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

mouseDownRight ( locator )
Simulates a user pressing the right mouse button (without releasing it yet) on the specified element.
Arguments:

locator - an element locator

mouseDownRightAt ( locator,coordString )
Simulates a user pressing the right mouse button (without releasing it yet) at the specified location.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

mouseMove ( locator )
Simulates a user pressing the mouse button (without releasing it yet) on the specified element.
Arguments:

locator - an element locator

mouseMoveAt ( locator,coordString )
Simulates a user pressing the mouse button (without releasing it yet) on the specified element.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

mouseOut ( locator )
Simulates a user moving the mouse pointer away from the specified element.
Arguments:

locator - an element locator

mouseOver ( locator )
Simulates a user hovering a mouse over the specified element.
Arguments:

locator - an element locator

mouseUp ( locator )
Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) on the specified element.
Arguments:

locator - an element locator

mouseUpAt ( locator,coordString )
Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) at the specified location.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

mouseUpRight ( locator )
Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) on the specified element.
Arguments:

locator - an element locator

mouseUpRightAt ( locator,coordString )
Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) at the specified location.
Arguments:

locator - an element locator
coordString - specifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.

open ( url )
Opens an URL in the test frame. This accepts both relative and absolute URLs. The "open" command waits for the page to load before proceeding, ie. the "AndWait" suffix is implicit. Note: The URL must be on the same domain as the runner HTML due to security restrictions in the browser (Same Origin Policy). If you need to open an URL on another domain, use the Selenium Server to start a new browser session on that domain.
Arguments:

url - the URL to open; may be relative or absolute

openWindow ( url,windowID )
Opens a popup window (if a window with that ID isn't already open). After opening the window, you'll need to select it using the selectWindow command.
This command can also be a useful workaround for bug SEL-339. In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example). In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow("", "myFunnyWindow").

Arguments:

url - the URL to open, which can be blank
windowID - the JavaScript window ID of the window to select

pause ( waitTime )
Wait for the specified amount of time (in milliseconds)
Arguments:

waitTime - the amount of time to sleep (in milliseconds)

refresh ( )
Simulates the user clicking the "Refresh" button on their browser.

removeAllSelections ( locator )
Unselects all of the selected options in a multi-select element.
Arguments:

locator - an element locator identifying a multi-select box

removeScript ( scriptTagId )
Removes a script tag from the Selenium document identified by the given id. Does nothing if the referenced tag doesn't exist.
Arguments:

scriptTagId - the id of the script element to remove.

removeSelection ( locator,optionLocator )
Remove a selection from the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators
Arguments:

locator - an element locator identifying a multi-select box
optionLocator - an option locator (a label by default)

rollup ( rollupName,kwargs )
Executes a command rollup, which is a series of commands with a unique name, and optionally arguments that control the generation of the set of commands. If any one of the rolled-up commands fails, the rollup is considered to have failed. Rollups may also contain nested rollups.
Arguments:

rollupName - the name of the rollup command
kwargs - keyword arguments string that influences how the rollup expands into commands

runScript ( script )
Creates a new "script" tag in the body of the current test window, and adds the specified text into the body of the command. Scripts run in this way can often be debugged more easily than scripts executed using Selenium's "getEval" command. Beware that JS exceptions thrown in these script tags aren't managed by Selenium, so you should probably wrap your script in try/catch blocks if there is any chance that the script will throw an exception.
Arguments:

script - the JavaScript snippet to run

select ( selectLocator,optionLocator )
Select an option from a drop-down using an option locator.
Option locators provide different ways of specifying options of an HTML Select element (e.g. for selecting a specific option, or for asserting that the selected option satisfies a specification). There are several forms of Select Option Locator.

label=labelPattern: matches options based on their labels, i.e. the visible text. (This is the default.)
label=regexp:^[Oo]ther
value=valuePattern: matches options based on their values.
value=other
id=id: matches options based on their ids.
id=option1
index=index: matches an option based on its index (offset from zero).
index=2
If no option locator prefix is provided, the default behaviour is to match on label.

Arguments:

selectLocator - an element locator identifying a drop-down menu
optionLocator - an option locator (a label by default)

selectFrame ( locator )
Selects a frame within the current window. (You may invoke this command multiple times to select nested frames.) To select the parent frame, use "relative=parent" as a locator; to select the top frame, use "relative=top". You can also select a frame by its 0-based index number; select the first frame with "index=0", or the third frame with "index=2".
You may also use a DOM expression to identify the frame you want directly, like this: dom=frames["main"].frames["subframe"]

Arguments:

locator - an element locator identifying a frame or iframe

selectPopUp ( windowID )
Simplifies the process of selecting a popup window (and does not offer functionality beyond what selectWindow() already provides).
If windowID is either not specified, or specified as "null", the first non-top window is selected. The top window is the one that would be selected by selectWindow() without providing a windowID . This should not be used when more than one popup window is in play.
Otherwise, the window will be looked up considering windowID as the following in order: 1) the "name" of the window, as specified to window.open(); 2) a javascript variable which is a reference to a window; and 3) the title of the window. This is the same ordered lookup performed by selectWindow .
Arguments:

windowID - an identifier for the popup window, which can take on a number of different meanings

selectWindow ( windowID )
Selects a popup window using a window locator; once a popup window has been selected, all commands go to that window. To select the main window again, use null as the target.
Window locators provide different ways of specifying the window object: by title, by internal JavaScript "name," or by JavaScript variable.

title=My Special Window: Finds the window using the text that appears in the title bar. Be careful; two windows can share the same title. If that happens, this locator will just pick one.
name=myWindow: Finds the window using its internal JavaScript "name" property. This is the second parameter "windowName" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag) (which Selenium intercepts).
var=variableName: Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current application window, e.g. "window.foo = window.open(url);". In those cases, you can open the window using "var=foo".
If no window locator prefix is provided, we'll try to guess what you mean like this:

1.) if windowID is null, (or the string "null") then it is assumed the user is referring to the original window instantiated by the browser).

2.) if the value of the "windowID" parameter is a JavaScript variable name in the current application window, then it is assumed that this variable contains the return value from a call to the JavaScript window.open() method.

3.) Otherwise, selenium looks in a hash it maintains that maps string names to window "names".

4.) If that fails, we'll try looping over all of the known windows to try to find the appropriate "title". Since "title" is not necessarily unique, this may have unexpected behavior.

If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages which identify the names of windows created via window.open (and therefore intercepted by Selenium). You will see messages like the following for each window as it is opened:

debug: window.open call intercepted; window ID (which you can use with selectWindow()) is "myNewWindow"

In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example). (This is bug SEL-339.) In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow("", "myFunnyWindow").

Arguments:

windowID - the JavaScript window ID of the window to select

setBrowserLogLevel ( logLevel )
Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded. Valid logLevel strings are: "debug", "info", "warn", "error" or "off". To see the browser logs, you need to either show the log window in GUI mode, or enable browser-side logging in Selenium RC.
Arguments:

logLevel - one of the following: "debug", "info", "warn", "error" or "off"

setCursorPosition ( locator,position )
Moves the text cursor to the specified position in the given input element or textarea. This method will fail if the specified element isn't an input element or textarea.
Arguments:

locator - an element locator pointing to an input element or textarea
position - the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field. You can also set the cursor to -1 to move it to the end of the field.

setMouseSpeed ( pixels )
Configure the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
Setting this value to 0 means that we'll send a "mousemove" event to every single pixel in between the start location and the end location; that can be very slow, and may cause some browsers to force the JavaScript to timeout.

If the mouse speed is greater than the distance between the two dragged objects, we'll just send one "mousemove" at the start location and then one final one at the end location.

Arguments:

pixels - the number of pixels between "mousemove" events

setSpeed ( value )
Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds.
Arguments:

value - the number of milliseconds to pause after operation

setTimeout ( timeout )
Specifies the amount of time that Selenium will wait for actions to complete.
Actions that require waiting include "open" and the "waitFor*" actions.

The default timeout is 30 seconds.
Arguments:

timeout - a timeout in milliseconds, after which the action will return with an error

shiftKeyDown ( )
Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.

shiftKeyUp ( )
Release the shift key.

store ( expression,variableName )
This command is a synonym for storeExpression.
Arguments:

expression - the value to store
variableName - the name of a variable in which the result is to be stored.

submit ( formLocator )
Submit the specified form. This is particularly useful for forms without submit buttons, e.g. single-input "Search" forms.
Arguments:

formLocator - an element locator for the form you want to submit

type ( locator,value )
Sets the value of an input field, as though you typed it in.
Can also be used to set the value of combo boxes, check boxes, etc. In these cases, value should be the value of the option selected, not the visible text.

Arguments:

locator - an element locator
value - the value to type

typeKeys ( locator,value )
Simulates keystroke events on the specified element, as though you typed the value key-by-key.
This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string; this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.

Unlike the simple "type" command, which forces the specified value into the page directly, this command may or may not have any visible effect, even in cases where typing keys would normally have a visible effect. For example, if you use "typeKeys" on a form element, you may or may not see the results of what you typed in the field.

In some cases, you may need to use the simple "type" command to set the value of the field and then the "typeKeys" command to send the keystroke events corresponding to what you just typed.

Arguments:

locator - an element locator
value - the value to type

uncheck ( locator )
Uncheck a toggle-button (checkbox/radio)
Arguments:

locator - an element locator

useXpathLibrary ( libraryName )
Allows choice of one of the available libraries.
Arguments:

libraryName - name of the desired library Only the following three can be chosen:
"ajaxslt" - Google's library
"javascript-xpath" - Cybozu Labs' faster library
"default" - The default library. Currently the default library is "ajaxslt" .
If libraryName isn't one of these three, then no change will be made.

waitForCondition ( script,timeout )
Runs the specified JavaScript snippet repeatedly until it evaluates to "true". The snippet may have multiple lines, but only the result of the last line will be considered.
Note that, by default, the snippet will be run in the runner's test window, not in the window of your application. To get the window of your application, you can use the JavaScript snippet selenium.browserbot.getCurrentWindow(), and then run your JavaScript in there

Arguments:

script - the JavaScript snippet to run
timeout - a timeout in milliseconds, after which this command will return with an error

waitForFrameToLoad ( frameAddress,timeout )
Waits for a new frame to load.
Selenium constantly keeps track of new pages and frames loading, and sets a "newPageLoaded" flag when it first notices a page load.

See waitForPageToLoad for more information.
Arguments:

frameAddress - FrameAddress from the server side
timeout - a timeout in milliseconds, after which this command will return with an error

waitForPageToLoad ( timeout )
Waits for a new page to load.
You can use this command instead of the "AndWait" suffixes, "clickAndWait", "selectAndWait", "typeAndWait" etc. (which are only available in the JS API).

Selenium constantly keeps track of new pages loading, and sets a "newPageLoaded" flag when it first notices a page load. Running any other Selenium command after turns the flag to false. Hence, if you want to wait for a page to load, you must wait immediately after a Selenium command that caused a page-load.

Arguments:

timeout - a timeout in milliseconds, after which this command will return with an error

waitForPopUp ( windowID,timeout )
Waits for a popup window to appear and load up.
Arguments:

windowID - the JavaScript window "name" of the window that will appear (not the text of the title bar) If unspecified, or specified as "null", this command will wait for the first non-top window to appear (don't rely on this if you are working with multiple popups simultaneously).
timeout - a timeout in milliseconds, after which the action will return with an error. If this value is not specified, the default Selenium timeout will be used. See the setTimeout() command.

windowFocus ( )
Gives focus to the currently selected window

windowMaximize ( )
Resize currently selected window to take up the entire screen

Selenium Accessors

assertErrorOnNext ( message )
Tell Selenium to expect an error on the next command execution.
Arguments:

message - The error message we should expect. This command will fail if the wrong error message appears.
Related Assertions, automatically generated:

assertNotErrorOnNext ( message )
verifyErrorOnNext ( message )
verifyNotErrorOnNext ( message )
waitForErrorOnNext ( message )
waitForNotErrorOnNext ( message )

assertFailureOnNext ( message )
Tell Selenium to expect a failure on the next command execution.
Arguments:

message - The failure message we should expect. This command will fail if the wrong failure message appears.
Related Assertions, automatically generated:

assertNotFailureOnNext ( message )
verifyFailureOnNext ( message )
verifyNotFailureOnNext ( message )
waitForFailureOnNext ( message )
waitForNotFailureOnNext ( message )

assertSelected ( selectLocator,optionLocator )
Verifies that the selected option of a drop-down satisfies the optionSpecifier. Note that this command is deprecated; you should use assertSelectedLabel, assertSelectedValue, assertSelectedIndex, or assertSelectedId instead.
See the select command for more information about option locators.

Arguments:

selectLocator - an element locator identifying a drop-down menu
optionLocator - an option locator, typically just an option label (e.g. "John Smith")
Related Assertions, automatically generated:

assertNotSelected ( selectLocator, optionLocator )
verifySelected ( selectLocator, optionLocator )
verifyNotSelected ( selectLocator, optionLocator )
waitForSelected ( selectLocator, optionLocator )
waitForNotSelected ( selectLocator, optionLocator )

storeAlert ( variableName )
Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.
Getting an alert has the same effect as manually clicking OK. If an alert is generated but you do not consume it with getAlert, the next Selenium action will fail.

Under Selenium, JavaScript alerts will NOT pop up a visible alert dialog.

Selenium does NOT support JavaScript alerts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.

Returns:
The message of the most recent JavaScript alert
Related Assertions, automatically generated:

assertAlert ( pattern )
assertNotAlert ( pattern )
verifyAlert ( pattern )
verifyNotAlert ( pattern )
waitForAlert ( pattern )
waitForNotAlert ( pattern )

storeAllButtons ( variableName )
Returns the IDs of all buttons on the page.
If a given button has no ID, it will appear as "" in this array.

Returns:
the IDs of all buttons on the page
Related Assertions, automatically generated:

assertAllButtons ( pattern )
assertNotAllButtons ( pattern )
verifyAllButtons ( pattern )
verifyNotAllButtons ( pattern )
waitForAllButtons ( pattern )
waitForNotAllButtons ( pattern )

storeAllFields ( variableName )
Returns the IDs of all input fields on the page.
If a given field has no ID, it will appear as "" in this array.

Returns:
the IDs of all field on the page
Related Assertions, automatically generated:

assertAllFields ( pattern )
assertNotAllFields ( pattern )
verifyAllFields ( pattern )
verifyNotAllFields ( pattern )
waitForAllFields ( pattern )
waitForNotAllFields ( pattern )

storeAllLinks ( variableName )
Returns the IDs of all links on the page.
If a given link has no ID, it will appear as "" in this array.

Returns:
the IDs of all links on the page
Related Assertions, automatically generated:

assertAllLinks ( pattern )
assertNotAllLinks ( pattern )
verifyAllLinks ( pattern )
verifyNotAllLinks ( pattern )
waitForAllLinks ( pattern )
waitForNotAllLinks ( pattern )

storeAllWindowIds ( variableName )
Returns the IDs of all windows that the browser knows about in an array.
Returns:
Array of identifiers of all windows that the browser knows about.
Related Assertions, automatically generated:

assertAllWindowIds ( pattern )
assertNotAllWindowIds ( pattern )
verifyAllWindowIds ( pattern )
verifyNotAllWindowIds ( pattern )
waitForAllWindowIds ( pattern )
waitForNotAllWindowIds ( pattern )

storeAllWindowNames ( variableName )
Returns the names of all windows that the browser knows about in an array.
Returns:
Array of names of all windows that the browser knows about.
Related Assertions, automatically generated:

assertAllWindowNames ( pattern )
assertNotAllWindowNames ( pattern )
verifyAllWindowNames ( pattern )
verifyNotAllWindowNames ( pattern )
waitForAllWindowNames ( pattern )
waitForNotAllWindowNames ( pattern )

storeAllWindowTitles ( variableName )
Returns the titles of all windows that the browser knows about in an array.
Returns:
Array of titles of all windows that the browser knows about.
Related Assertions, automatically generated:

assertAllWindowTitles ( pattern )
assertNotAllWindowTitles ( pattern )
verifyAllWindowTitles ( pattern )
verifyNotAllWindowTitles ( pattern )
waitForAllWindowTitles ( pattern )
waitForNotAllWindowTitles ( pattern )

storeAttribute ( attributeLocator, variableName )
Gets the value of an element attribute. The value of the attribute may differ across browsers (this is the case for the "style" attribute, for example).
Arguments:

attributeLocator - an element locator followed by an @ sign and then the name of the attribute, e.g. "foo@bar"
variableName - the name of a variable in which the result is to be stored.
Returns:
the value of the specified attribute
Related Assertions, automatically generated:

assertAttribute ( attributeLocator, pattern )
assertNotAttribute ( attributeLocator, pattern )
verifyAttribute ( attributeLocator, pattern )
verifyNotAttribute ( attributeLocator, pattern )
waitForAttribute ( attributeLocator, pattern )
waitForNotAttribute ( attributeLocator, pattern )

storeAttributeFromAllWindows ( attributeName, variableName )
Returns an array of JavaScript property values from all known windows having one.
Arguments:

attributeName - name of an attribute on the windows
variableName - the name of a variable in which the result is to be stored.
Returns:
the set of values of this attribute from all known windows.
Related Assertions, automatically generated:

assertAttributeFromAllWindows ( attributeName, pattern )
assertNotAttributeFromAllWindows ( attributeName, pattern )
verifyAttributeFromAllWindows ( attributeName, pattern )
verifyNotAttributeFromAllWindows ( attributeName, pattern )
waitForAttributeFromAllWindows ( attributeName, pattern )
waitForNotAttributeFromAllWindows ( attributeName, pattern )

storeBodyText ( variableName )
Gets the entire text of the page.
Returns:
the entire text of the page
Related Assertions, automatically generated:

assertBodyText ( pattern )
assertNotBodyText ( pattern )
verifyBodyText ( pattern )
verifyNotBodyText ( pattern )
waitForBodyText ( pattern )
waitForNotBodyText ( pattern )

storeConfirmation ( variableName )
Retrieves the message of a JavaScript confirmation dialog generated during the previous action.
By default, the confirm function will return true, having the same effect as manually clicking OK. This can be changed by prior execution of the chooseCancelOnNextConfirmation command.

If an confirmation is generated but you do not consume it with getConfirmation, the next Selenium action will fail.

NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible dialog.

NOTE: Selenium does NOT support JavaScript confirmations that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until you manually click OK.

Returns:
the message of the most recent JavaScript confirmation dialog
Related Assertions, automatically generated:

assertConfirmation ( pattern )
assertNotConfirmation ( pattern )
verifyConfirmation ( pattern )
verifyNotConfirmation ( pattern )
waitForConfirmation ( pattern )
waitForNotConfirmation ( pattern )

storeCookie ( variableName )
Return all cookies of the current page under test.
Returns:
all cookies of the current page under test
Related Assertions, automatically generated:

assertCookie ( pattern )
assertNotCookie ( pattern )
verifyCookie ( pattern )
verifyNotCookie ( pattern )
waitForCookie ( pattern )
waitForNotCookie ( pattern )

storeCookieByName ( name, variableName )
Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.
Arguments:

name - the name of the cookie
variableName - the name of a variable in which the result is to be stored.
Returns:
the value of the cookie
Related Assertions, automatically generated:

assertCookieByName ( name, pattern )
assertNotCookieByName ( name, pattern )
verifyCookieByName ( name, pattern )
verifyNotCookieByName ( name, pattern )
waitForCookieByName ( name, pattern )
waitForNotCookieByName ( name, pattern )

storeCursorPosition ( locator, variableName )
Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.
Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to return the position of the last location of the cursor, even though the cursor is now gone from the page. This is filed as SEL-243.

This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.
Arguments:

locator - an element locator pointing to an input element or textarea
variableName - the name of a variable in which the result is to be stored.
Returns:
the numerical position of the cursor in the field
Related Assertions, automatically generated:

assertCursorPosition ( locator, pattern )
assertNotCursorPosition ( locator, pattern )
verifyCursorPosition ( locator, pattern )
verifyNotCursorPosition ( locator, pattern )
waitForCursorPosition ( locator, pattern )
waitForNotCursorPosition ( locator, pattern )

storeElementHeight ( locator, variableName )
Retrieves the height of an element
Arguments:

locator - an element locator pointing to an element
variableName - the name of a variable in which the result is to be stored.
Returns:
height of an element in pixels
Related Assertions, automatically generated:

assertElementHeight ( locator, pattern )
assertNotElementHeight ( locator, pattern )
verifyElementHeight ( locator, pattern )
verifyNotElementHeight ( locator, pattern )
waitForElementHeight ( locator, pattern )
waitForNotElementHeight ( locator, pattern )

storeElementIndex ( locator, variableName )
Get the relative index of an element to its parent (starting from 0). The comment node and empty text node will be ignored.
Arguments:

locator - an element locator pointing to an element
variableName - the name of a variable in which the result is to be stored.
Returns:
of relative index of the element to its parent (starting from 0)
Related Assertions, automatically generated:

assertElementIndex ( locator, pattern )
assertNotElementIndex ( locator, pattern )
verifyElementIndex ( locator, pattern )
verifyNotElementIndex ( locator, pattern )
waitForElementIndex ( locator, pattern )
waitForNotElementIndex ( locator, pattern )

storeElementPositionLeft ( locator, variableName )
Retrieves the horizontal position of an element
Arguments:

locator - an element locator pointing to an element OR an element itself
variableName - the name of a variable in which the result is to be stored.
Returns:
of pixels from the edge of the frame.
Related Assertions, automatically generated:

assertElementPositionLeft ( locator, pattern )
assertNotElementPositionLeft ( locator, pattern )
verifyElementPositionLeft ( locator, pattern )
verifyNotElementPositionLeft ( locator, pattern )
waitForElementPositionLeft ( locator, pattern )
waitForNotElementPositionLeft ( locator, pattern )

storeElementPositionTop ( locator, variableName )
Retrieves the vertical position of an element
Arguments:

locator - an element locator pointing to an element OR an element itself
variableName - the name of a variable in which the result is to be stored.
Returns:
of pixels from the edge of the frame.
Related Assertions, automatically generated:

assertElementPositionTop ( locator, pattern )
assertNotElementPositionTop ( locator, pattern )
verifyElementPositionTop ( locator, pattern )
verifyNotElementPositionTop ( locator, pattern )
waitForElementPositionTop ( locator, pattern )
waitForNotElementPositionTop ( locator, pattern )

storeElementWidth ( locator, variableName )
Retrieves the width of an element
Arguments:

locator - an element locator pointing to an element
variableName - the name of a variable in which the result is to be stored.
Returns:
width of an element in pixels
Related Assertions, automatically generated:

assertElementWidth ( locator, pattern )
assertNotElementWidth ( locator, pattern )
verifyElementWidth ( locator, pattern )
verifyNotElementWidth ( locator, pattern )
waitForElementWidth ( locator, pattern )
waitForNotElementWidth ( locator, pattern )

storeEval ( script, variableName )
Gets the result of evaluating the specified JavaScript snippet. The snippet may have multiple lines, but only the result of the last line will be returned.
Note that, by default, the snippet will run in the context of the "selenium" object itself, so this will refer to the Selenium object. Use window to refer to the window of your application, e.g. window.document.getElementById('foo')

If you need to use a locator to refer to a single element in your application page, you can use this.browserbot.findElement("id=foo") where "id=foo" is your locator.

Arguments:

script - the JavaScript snippet to run
variableName - the name of a variable in which the result is to be stored.
Returns:
the results of evaluating the snippet
Related Assertions, automatically generated:

assertEval ( script, pattern )
assertNotEval ( script, pattern )
verifyEval ( script, pattern )
verifyNotEval ( script, pattern )
waitForEval ( script, pattern )
waitForNotEval ( script, pattern )

storeExpression ( expression, variableName )
Returns the specified expression.
This is useful because of JavaScript preprocessing. It is used to generate commands like assertExpression and waitForExpression.

Arguments:

expression - the value to return
variableName - the name of a variable in which the result is to be stored.
Returns:
the value passed in
Related Assertions, automatically generated:

assertExpression ( expression, pattern )
assertNotExpression ( expression, pattern )
verifyExpression ( expression, pattern )
verifyNotExpression ( expression, pattern )
waitForExpression ( expression, pattern )
waitForNotExpression ( expression, pattern )

storeHtmlSource ( variableName )
Returns the entire HTML source between the opening and closing "html" tags.
Returns:
the entire HTML source
Related Assertions, automatically generated:

assertHtmlSource ( pattern )
assertNotHtmlSource ( pattern )
verifyHtmlSource ( pattern )
verifyNotHtmlSource ( pattern )
waitForHtmlSource ( pattern )
waitForNotHtmlSource ( pattern )

storeLocation ( variableName )
Gets the absolute URL of the current page.
Returns:
the absolute URL of the current page
Related Assertions, automatically generated:

assertLocation ( pattern )
assertNotLocation ( pattern )
verifyLocation ( pattern )
verifyNotLocation ( pattern )
waitForLocation ( pattern )
waitForNotLocation ( pattern )

storeMouseSpeed ( variableName )
Returns the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
Returns:
the number of pixels between "mousemove" events during dragAndDrop commands (default=10)
Related Assertions, automatically generated:

assertMouseSpeed ( pattern )
assertNotMouseSpeed ( pattern )
verifyMouseSpeed ( pattern )
verifyNotMouseSpeed ( pattern )
waitForMouseSpeed ( pattern )
waitForNotMouseSpeed ( pattern )

storePrompt ( variableName )
Retrieves the message of a JavaScript question prompt dialog generated during the previous action.
Successful handling of the prompt requires prior execution of the answerOnNextPrompt command. If a prompt is generated but you do not get/verify it, the next Selenium action will fail.

NOTE: under Selenium, JavaScript prompts will NOT pop up a visible dialog.

NOTE: Selenium does NOT support JavaScript prompts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.

Returns:
the message of the most recent JavaScript question prompt
Related Assertions, automatically generated:

assertPrompt ( pattern )
assertNotPrompt ( pattern )
verifyPrompt ( pattern )
verifyNotPrompt ( pattern )
waitForPrompt ( pattern )
waitForNotPrompt ( pattern )

storeSelectedId ( selectLocator, variableName )
Gets option element ID for selected option in the specified select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
the selected option ID in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedId ( selectLocator, pattern )
assertNotSelectedId ( selectLocator, pattern )
verifySelectedId ( selectLocator, pattern )
verifyNotSelectedId ( selectLocator, pattern )
waitForSelectedId ( selectLocator, pattern )
waitForNotSelectedId ( selectLocator, pattern )

storeSelectedIds ( selectLocator, variableName )
Gets all option element IDs for selected options in the specified select or multi-select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
an array of all selected option IDs in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedIds ( selectLocator, pattern )
assertNotSelectedIds ( selectLocator, pattern )
verifySelectedIds ( selectLocator, pattern )
verifyNotSelectedIds ( selectLocator, pattern )
waitForSelectedIds ( selectLocator, pattern )
waitForNotSelectedIds ( selectLocator, pattern )

storeSelectedIndex ( selectLocator, variableName )
Gets option index (option number, starting at 0) for selected option in the specified select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
the selected option index in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedIndex ( selectLocator, pattern )
assertNotSelectedIndex ( selectLocator, pattern )
verifySelectedIndex ( selectLocator, pattern )
verifyNotSelectedIndex ( selectLocator, pattern )
waitForSelectedIndex ( selectLocator, pattern )
waitForNotSelectedIndex ( selectLocator, pattern )

storeSelectedIndexes ( selectLocator, variableName )
Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
an array of all selected option indexes in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedIndexes ( selectLocator, pattern )
assertNotSelectedIndexes ( selectLocator, pattern )
verifySelectedIndexes ( selectLocator, pattern )
verifyNotSelectedIndexes ( selectLocator, pattern )
waitForSelectedIndexes ( selectLocator, pattern )
waitForNotSelectedIndexes ( selectLocator, pattern )

storeSelectedLabel ( selectLocator, variableName )
Gets option label (visible text) for selected option in the specified select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
the selected option label in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedLabel ( selectLocator, pattern )
assertNotSelectedLabel ( selectLocator, pattern )
verifySelectedLabel ( selectLocator, pattern )
verifyNotSelectedLabel ( selectLocator, pattern )
waitForSelectedLabel ( selectLocator, pattern )
waitForNotSelectedLabel ( selectLocator, pattern )

storeSelectedLabels ( selectLocator, variableName )
Gets all option labels (visible text) for selected options in the specified select or multi-select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
an array of all selected option labels in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedLabels ( selectLocator, pattern )
assertNotSelectedLabels ( selectLocator, pattern )
verifySelectedLabels ( selectLocator, pattern )
verifyNotSelectedLabels ( selectLocator, pattern )
waitForSelectedLabels ( selectLocator, pattern )
waitForNotSelectedLabels ( selectLocator, pattern )

storeSelectedValue ( selectLocator, variableName )
Gets option value (value attribute) for selected option in the specified select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
the selected option value in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedValue ( selectLocator, pattern )
assertNotSelectedValue ( selectLocator, pattern )
verifySelectedValue ( selectLocator, pattern )
verifyNotSelectedValue ( selectLocator, pattern )
waitForSelectedValue ( selectLocator, pattern )
waitForNotSelectedValue ( selectLocator, pattern )

storeSelectedValues ( selectLocator, variableName )
Gets all option values (value attributes) for selected options in the specified select or multi-select element.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
an array of all selected option values in the specified select drop-down
Related Assertions, automatically generated:

assertSelectedValues ( selectLocator, pattern )
assertNotSelectedValues ( selectLocator, pattern )
verifySelectedValues ( selectLocator, pattern )
verifyNotSelectedValues ( selectLocator, pattern )
waitForSelectedValues ( selectLocator, pattern )
waitForNotSelectedValues ( selectLocator, pattern )

storeSelectOptions ( selectLocator, variableName )
Gets all option labels in the specified select drop-down.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
an array of all option labels in the specified select drop-down
Related Assertions, automatically generated:

assertSelectOptions ( selectLocator, pattern )
assertNotSelectOptions ( selectLocator, pattern )
verifySelectOptions ( selectLocator, pattern )
verifyNotSelectOptions ( selectLocator, pattern )
waitForSelectOptions ( selectLocator, pattern )
waitForNotSelectOptions ( selectLocator, pattern )

storeSpeed ( variableName )
Get execution speed (i.e., get the millisecond length of the delay following each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds. See also setSpeed.
Returns:
the execution speed in milliseconds.
Related Assertions, automatically generated:

assertSpeed ( pattern )
assertNotSpeed ( pattern )
verifySpeed ( pattern )
verifyNotSpeed ( pattern )
waitForSpeed ( pattern )
waitForNotSpeed ( pattern )

storeTable ( tableCellAddress, variableName )
Gets the text from a cell of a table. The cellAddress syntax tableLocator.row.column, where row and column start at 0.
Arguments:

tableCellAddress - a cell address, e.g. "foo.1.4"
variableName - the name of a variable in which the result is to be stored.
Returns:
the text from the specified cell
Related Assertions, automatically generated:

assertTable ( tableCellAddress, pattern )
assertNotTable ( tableCellAddress, pattern )
verifyTable ( tableCellAddress, pattern )
verifyNotTable ( tableCellAddress, pattern )
waitForTable ( tableCellAddress, pattern )
waitForNotTable ( tableCellAddress, pattern )

storeText ( locator, variableName )
Gets the text of an element. This works for any element that contains text. This command uses either the textContent (Mozilla-like browsers) or the innerText (IE-like browsers) of the element, which is the rendered text shown to the user.
Arguments:

locator - an element locator
variableName - the name of a variable in which the result is to be stored.
Returns:
the text of the element
Related Assertions, automatically generated:

assertText ( locator, pattern )
assertNotText ( locator, pattern )
verifyText ( locator, pattern )
verifyNotText ( locator, pattern )
waitForText ( locator, pattern )
waitForNotText ( locator, pattern )

storeTitle ( variableName )
Gets the title of the current page.
Returns:
the title of the current page
Related Assertions, automatically generated:

assertTitle ( pattern )
assertNotTitle ( pattern )
verifyTitle ( pattern )
verifyNotTitle ( pattern )
waitForTitle ( pattern )
waitForNotTitle ( pattern )

storeValue ( locator, variableName )
Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter). For checkbox/radio elements, the value will be "on" or "off" depending on whether the element is checked or not.
Arguments:

locator - an element locator
variableName - the name of a variable in which the result is to be stored.
Returns:
the element value, or "on/off" for checkbox/radio elements
Related Assertions, automatically generated:

assertValue ( locator, pattern )
assertNotValue ( locator, pattern )
verifyValue ( locator, pattern )
verifyNotValue ( locator, pattern )
waitForValue ( locator, pattern )
waitForNotValue ( locator, pattern )

storeWhetherThisFrameMatchFrameExpression ( currentFrameString, target, variableName )
Determine whether current/locator identify the frame containing this running code.
This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the "current" frame. In this case, when the test calls selectFrame, this routine is called for each frame to figure out which one has been selected. The selected frame will return true, while all others will return false.

Arguments:

currentFrameString - starting frame
target - new frame (which might be relative to the current one)
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the new frame is this code's window
Related Assertions, automatically generated:

assertWhetherThisFrameMatchFrameExpression ( currentFrameString, target )
assertNotWhetherThisFrameMatchFrameExpression ( currentFrameString, target )
verifyWhetherThisFrameMatchFrameExpression ( currentFrameString, target )
verifyNotWhetherThisFrameMatchFrameExpression ( currentFrameString, target )
waitForWhetherThisFrameMatchFrameExpression ( currentFrameString, target )
waitForNotWhetherThisFrameMatchFrameExpression ( currentFrameString, target )

storeWhetherThisWindowMatchWindowExpression ( currentWindowString, target, variableName )
Determine whether currentWindowString plus target identify the window containing this running code.
This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the "current" window. In this case, when the test calls selectWindow, this routine is called for each window to figure out which one has been selected. The selected window will return true, while all others will return false.

Arguments:

currentWindowString - starting window
target - new window (which might be relative to the current one, e.g., "_parent")
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the new window is this code's window
Related Assertions, automatically generated:

assertWhetherThisWindowMatchWindowExpression ( currentWindowString, target )
assertNotWhetherThisWindowMatchWindowExpression ( currentWindowString, target )
verifyWhetherThisWindowMatchWindowExpression ( currentWindowString, target )
verifyNotWhetherThisWindowMatchWindowExpression ( currentWindowString, target )
waitForWhetherThisWindowMatchWindowExpression ( currentWindowString, target )
waitForNotWhetherThisWindowMatchWindowExpression ( currentWindowString, target )

storeXpathCount ( xpath, variableName )
Returns the number of nodes that match the specified xpath, eg. "//table" would give the number of tables.
Arguments:

xpath - the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.
variableName - the name of a variable in which the result is to be stored.
Returns:
the number of nodes that match the specified xpath
Related Assertions, automatically generated:

assertXpathCount ( xpath, pattern )
assertNotXpathCount ( xpath, pattern )
verifyXpathCount ( xpath, pattern )
verifyNotXpathCount ( xpath, pattern )
waitForXpathCount ( xpath, pattern )
waitForNotXpathCount ( xpath, pattern )

storeAlertPresent ( variableName )
Has an alert occurred?
This function never throws an exception

Returns:
true if there is an alert
Related Assertions, automatically generated:

assertAlertPresent ( )
assertAlertNotPresent ( )
verifyAlertPresent ( )
verifyAlertNotPresent ( )
waitForAlertPresent ( )
waitForAlertNotPresent ( )

storeChecked ( locator, variableName )
Gets whether a toggle-button (checkbox/radio) is checked. Fails if the specified element doesn't exist or isn't a toggle-button.
Arguments:

locator - an element locator pointing to a checkbox or radio button
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the checkbox is checked, false otherwise
Related Assertions, automatically generated:

assertChecked ( locator )
assertNotChecked ( locator )
verifyChecked ( locator )
verifyNotChecked ( locator )
waitForChecked ( locator )
waitForNotChecked ( locator )

storeConfirmationPresent ( variableName )
Has confirm() been called?
This function never throws an exception

Returns:
true if there is a pending confirmation
Related Assertions, automatically generated:

assertConfirmationPresent ( )
assertConfirmationNotPresent ( )
verifyConfirmationPresent ( )
verifyConfirmationNotPresent ( )
waitForConfirmationPresent ( )
waitForConfirmationNotPresent ( )

storeCookiePresent ( name, variableName )
Returns true if a cookie with the specified name is present, or false otherwise.
Arguments:

name - the name of the cookie
variableName - the name of a variable in which the result is to be stored.
Returns:
true if a cookie with the specified name is present, or false otherwise.
Related Assertions, automatically generated:

assertCookiePresent ( name )
assertCookieNotPresent ( name )
verifyCookiePresent ( name )
verifyCookieNotPresent ( name )
waitForCookiePresent ( name )
waitForCookieNotPresent ( name )

storeEditable ( locator, variableName )
Determines whether the specified input element is editable, ie hasn't been disabled. This method will fail if the specified element isn't an input element.
Arguments:

locator - an element locator
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the input element is editable, false otherwise
Related Assertions, automatically generated:

assertEditable ( locator )
assertNotEditable ( locator )
verifyEditable ( locator )
verifyNotEditable ( locator )
waitForEditable ( locator )
waitForNotEditable ( locator )

storeElementPresent ( locator, variableName )
Verifies that the specified element is somewhere on the page.
Arguments:

locator - an element locator
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the element is present, false otherwise
Related Assertions, automatically generated:

assertElementPresent ( locator )
assertElementNotPresent ( locator )
verifyElementPresent ( locator )
verifyElementNotPresent ( locator )
waitForElementPresent ( locator )
waitForElementNotPresent ( locator )

storeOrdered ( locator1, locator2, variableName )
Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will not be considered ordered.
Arguments:

locator1 - an element locator pointing to the first element
locator2 - an element locator pointing to the second element
variableName - the name of a variable in which the result is to be stored.
Returns:
true if element1 is the previous sibling of element2, false otherwise
Related Assertions, automatically generated:

assertOrdered ( locator1, locator2 )
assertNotOrdered ( locator1, locator2 )
verifyOrdered ( locator1, locator2 )
verifyNotOrdered ( locator1, locator2 )
waitForOrdered ( locator1, locator2 )
waitForNotOrdered ( locator1, locator2 )

storePromptPresent ( variableName )
Has a prompt occurred?
This function never throws an exception

Returns:
true if there is a pending prompt
Related Assertions, automatically generated:

assertPromptPresent ( )
assertPromptNotPresent ( )
verifyPromptPresent ( )
verifyPromptNotPresent ( )
waitForPromptPresent ( )
waitForPromptNotPresent ( )

storeSomethingSelected ( selectLocator, variableName )
Determines whether some option in a drop-down menu is selected.
Arguments:

selectLocator - an element locator identifying a drop-down menu
variableName - the name of a variable in which the result is to be stored.
Returns:
true if some option has been selected, false otherwise
Related Assertions, automatically generated:

assertSomethingSelected ( selectLocator )
assertNotSomethingSelected ( selectLocator )
verifySomethingSelected ( selectLocator )
verifyNotSomethingSelected ( selectLocator )
waitForSomethingSelected ( selectLocator )
waitForNotSomethingSelected ( selectLocator )

storeTextPresent ( pattern, variableName )
Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.
Arguments:

pattern - a pattern to match with the text of the page
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the pattern matches the text, false otherwise
Related Assertions, automatically generated:

assertTextPresent ( pattern )
assertTextNotPresent ( pattern )
verifyTextPresent ( pattern )
verifyTextNotPresent ( pattern )
waitForTextPresent ( pattern )
waitForTextNotPresent ( pattern )

storeVisible ( locator, variableName )
Determines if the specified element is visible. An element can be rendered invisible by setting the CSS "visibility" property to "hidden", or the "display" property to "none", either for the element itself or one if its ancestors. This method will fail if the element is not present.
Arguments:

locator - an element locator
variableName - the name of a variable in which the result is to be stored.
Returns:
true if the specified element is visible, false otherwise
Related Assertions, automatically generated:

assertVisible ( locator )
assertNotVisible ( locator )
verifyVisible ( locator )
verifyNotVisible ( locator )
waitForVisible ( locator )
waitForNotVisible ( locator )

